// <auto-generated />
using System;
using Collector.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Collector.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Collector.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("City");

                    b.Property<int?>("ClientID");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<int?>("MemberID");

                    b.Property<int>("Order");

                    b.Property<string>("PostalCode");

                    b.Property<string>("PostalCode2");

                    b.Property<string>("State");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("MemberID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Collector.Models.Borrowers", b =>
                {
                    b.Property<int>("LoanID");

                    b.Property<int>("MemberID");

                    b.Property<int>("Type");

                    b.HasKey("LoanID", "MemberID");

                    b.HasIndex("MemberID");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("Collector.Models.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.HasKey("ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Collector.Models.Collateral", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressID");

                    b.Property<string>("Description");

                    b.Property<int?>("LoanID");

                    b.Property<string>("Make");

                    b.Property<string>("Model");

                    b.Property<int>("Order");

                    b.Property<string>("Position");

                    b.Property<double?>("PropertyPercentage");

                    b.Property<double?>("PropertyValue");

                    b.Property<int>("Type");

                    b.Property<int?>("Year");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("LoanID");

                    b.ToTable("Collaterals");
                });

            modelBuilder.Entity("Collector.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientID");

                    b.Property<string>("ContactDescription");

                    b.Property<string>("ContactInfo");

                    b.Property<string>("CountryCode");

                    b.Property<string>("ExtCode");

                    b.Property<bool?>("Fax");

                    b.Property<int?>("MemberID");

                    b.Property<bool?>("Mobile");

                    b.Property<int>("Order");

                    b.Property<string>("RegionCode");

                    b.Property<bool?>("SMS");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("MemberID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Collector.Models.Deposit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountStatus");

                    b.Property<string>("AccountType");

                    b.Property<double?>("AverageMonthlyBalance");

                    b.Property<double?>("AverageMonthlyDeposits");

                    b.Property<int>("ClientID");

                    b.Property<DateTime>("ClosedDate");

                    b.Property<double>("CurrentBalance");

                    b.Property<DateTime>("DateLastPositive");

                    b.Property<double?>("DueLateCharges");

                    b.Property<double>("DuePrincipal");

                    b.Property<double?>("InterestRate");

                    b.Property<double?>("LastDepositAmount");

                    b.Property<DateTime>("LastDepositDate");

                    b.Property<DateTime>("LastImportDate");

                    b.Property<DateTime>("LastMaintenanceDate");

                    b.Property<DateTime>("MaturityDate");

                    b.Property<DateTime>("OpenDate");

                    b.Property<double?>("OpenDeposit");

                    b.Property<string>("ProductName");

                    b.Property<bool>("SocialSecuritDeposit");

                    b.Property<int>("Status");

                    b.Property<bool>("StudentLoanDeposit");

                    b.Property<int?>("Term");

                    b.Property<int?>("TimesLate180days");

                    b.Property<int?>("TimesLate30Days");

                    b.Property<int?>("TimesLate60Days");

                    b.Property<int?>("TimesLate90Days");

                    b.Property<double>("TotalDueAmount");

                    b.Property<double>("UncollectableFunds");

                    b.Property<bool>("VeteranDeposit");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Collector.Models.Depositors", b =>
                {
                    b.Property<int>("DepositID");

                    b.Property<int>("MemberID");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("DepositID", "MemberID");

                    b.HasIndex("MemberID");

                    b.ToTable("Depositors");
                });

            modelBuilder.Entity("Collector.Models.Loan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountStatus");

                    b.Property<string>("AccountType");

                    b.Property<double?>("AmountInSuspense");

                    b.Property<double?>("ChargedOffAmount");

                    b.Property<int>("ClientID");

                    b.Property<DateTime>("ClosedDate");

                    b.Property<double?>("CreditLimit");

                    b.Property<int?>("CreditScore");

                    b.Property<DateTime>("DueDate");

                    b.Property<double>("DueEscrow");

                    b.Property<double>("DueInterest");

                    b.Property<double>("DueLateCharges");

                    b.Property<double>("DuePrincipal");

                    b.Property<double?>("EscrowBalance");

                    b.Property<DateTime>("FirstPaymentDate");

                    b.Property<double?>("InterestRate");

                    b.Property<DateTime>("LastImportDate");

                    b.Property<DateTime>("LastMaintenanceDate");

                    b.Property<double?>("LastPaymentAmount");

                    b.Property<DateTime>("LastPaymentDate");

                    b.Property<DateTime>("MaturityDate");

                    b.Property<double?>("MonthlyPayment");

                    b.Property<DateTime>("OpenDate");

                    b.Property<double>("OriginalAmount");

                    b.Property<double?>("PierDiem");

                    b.Property<double>("PrincipalAmount");

                    b.Property<string>("ProductName");

                    b.Property<int>("Status");

                    b.Property<int?>("Term");

                    b.Property<int?>("TimesLate180days");

                    b.Property<int?>("TimesLate30Days");

                    b.Property<int?>("TimesLate60Days");

                    b.Property<int?>("TimesLate90Days");

                    b.Property<double?>("TodaysPayOffAmount");

                    b.Property<double>("TotalDueAmount");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Collector.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientID");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("OrganizationName");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Collector.Models.Address", b =>
                {
                    b.HasOne("Collector.Models.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientID");

                    b.HasOne("Collector.Models.Member", "Member")
                        .WithMany("Addresses")
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("Collector.Models.Borrowers", b =>
                {
                    b.HasOne("Collector.Models.Loan", "Loan")
                        .WithMany("Borrowers")
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Collector.Models.Member", "Member")
                        .WithMany("Borrowers")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Collector.Models.Collateral", b =>
                {
                    b.HasOne("Collector.Models.Address", "Address")
                        .WithMany("Collaterals")
                        .HasForeignKey("AddressID");

                    b.HasOne("Collector.Models.Loan")
                        .WithMany("Collaterals")
                        .HasForeignKey("LoanID");
                });

            modelBuilder.Entity("Collector.Models.Contact", b =>
                {
                    b.HasOne("Collector.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientID");

                    b.HasOne("Collector.Models.Member", "Member")
                        .WithMany("Contacts")
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("Collector.Models.Deposit", b =>
                {
                    b.HasOne("Collector.Models.Client", "Client")
                        .WithMany("Deposits")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Collector.Models.Depositors", b =>
                {
                    b.HasOne("Collector.Models.Deposit", "Deposit")
                        .WithMany("Depositors")
                        .HasForeignKey("DepositID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Collector.Models.Member", "Member")
                        .WithMany("Depositors")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Collector.Models.Loan", b =>
                {
                    b.HasOne("Collector.Models.Client", "Client")
                        .WithMany("Loans")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Collector.Models.Member", b =>
                {
                    b.HasOne("Collector.Models.Client", "Client")
                        .WithMany("Members")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
